from datetime import timedelta
from typing import Any, Protocol, runtime_checkable


@runtime_checkable
class Cache[K, V](Protocol):
    async def get(self, key: K) -> V | None: ...
    async def set(
        self, key: K, value: Any, expire: float | timedelta | None = None, **kw: Any
    ) -> None: ...
    async def exists(self, key: K) -> bool: ...
    async def delete(self, *keys: K) -> None: ...
    async def clear(self) -> None: ...
    async def close(self) -> None: ...
    async def set_list(
        self, key: K, *value: Any, expire: float | timedelta | None = None, **kw: Any
    ) -> None: ...
    async def get_list(self, key: K) -> list[V]: ...
    async def discard(self, key: K, value: Any, **kw: Any) -> None: ...
    async def keys(self) -> list[K]: ...


@runtime_checkable
class StrCache(Cache[str, str], Protocol): ...
