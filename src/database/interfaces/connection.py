from __future__ import annotations

from types import TracebackType
from typing import Any, Literal, Protocol, runtime_checkable


type IsolationLevel = Literal[
    "SERIALIZABLE",
    "REPEATABLE READ",
    "READ COMMITTED",
    "READ UNCOMMITTED",
]


@runtime_checkable
class ConnectionDriver(Protocol):
    async def exec_driver_sql(self, *args: Any, **kw: Any) -> Any: ...


@runtime_checkable
class AsyncConnection(Protocol):
    async def __aenter__(self) -> AsyncConnection: ...
    async def __aexit__(
        self,
        exc_type: type[BaseException] | None,
        exc_value: BaseException | None,
        traceback: TracebackType | None,
    ) -> None: ...
    @property
    def is_active(self) -> bool: ...
    def in_transaction(self) -> bool: ...
    def in_nested_transaction(self) -> bool: ...
    def begin(self) -> Any: ...
    def begin_nested(self) -> Any: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def execute(self, *args: Any, **kw: Any) -> Any: ...
    async def stream(self, *args: Any, **kw: Any) -> Any: ...
    async def connection(self, *args: Any, **kw: Any) -> ConnectionDriver: ...
    async def close(self) -> None: ...
